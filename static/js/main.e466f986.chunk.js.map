{"version":3,"sources":["Simulator.tsx","graph.ts","Brain.tsx","Simulation.tsx","createInputArray.tsx","Inspector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["mean","utils","distance","gaussian","random","max","sign","n","pad","array","assign","fill","Array","visible","self","investor","threshold","visibility","lastFew","arr","slice","Math","length","WIDTH","HEIGHT","MAX_COUNT","HISTORY_STEPS","VISION_RADIUS","SCALE","Simulator","name","dataset","mutate","doRestore","onDone","noop","log","steps","currentStep","environment","renderer","company","results","investors","speed","network","this","Environment","torus","CanvasRenderer","width","height","connectionOpacity","Network","use","agent","makeCompany","values","change","value","addAgent","times","makeInvestor","cookies","cookiesInvested","posts","x","y","connect","push","visibleInvestors","filter","i","data","range","tick","target","step","map","Agent","size","color","vision","makeVision","current","set","clamp","setTimeout","run","requestAnimationFrame","recordResult","setupData","setup","ctx","canvas","getContext","font","fillStyle","postCount","sumBy","c","fillText","r","toFixed","tweet","last","textSentiment","text","substring","teardown","restore","out","totalInvested","day","post","initial","window","d3","Brain","report","neat","iterations","fittest","model","undefined","score","stopped","Neat","mutation","methods","ALL","elitism","equal","a","g","genome","population","scores","activate","currentFitness","console","generation","getAverage","fitness","sort","newPopulation","popsize","getOffspring","startEvaluation","endEvaluation","evolve","input","output","codes","entries","every","p","Simulation","theme","useTheme","useState","ref","setRef","useReducer","prev","next","info","setInfo","setSpeed","action","addLog","brainRef","useRef","simulatorRef","useEffect","brain","mutator","Promise","res","innerHTML","items","code","floor","currentCompany","simulator","prices","createInputArray","msg","mount","train","stop","Box","display","bgcolor","palette","background","paper","pl","overflow","pt","Typography","variant","gutterBottom","Link","href","rel","ButtonGroup","aria-label","Button","onClick","disabled","pr","pb","download","Blob","JSON","stringify","toJSON","l","List","ListItem","ListItemText","primary","secondary","flex","alignItems","justifyContent","default","e","flatMap","favoriteCount","retweetCount","Inspector","setModel","loading","setLoading","fromJSON","defer","graph","panel","d3cola","cola","avoidOverlaps","svg","remove","append","attr","nodes","forEach","v","links","constraints","symmetricDiffLinkLengths","linkDistance","start","path","selectAll","enter","d","round","weight","source","id","node","call","drag","activation","bias","label","index","on","deltaX","deltaY","dist","sqrt","normX","normY","isNaN","sourcePadding","targetPadding","sourceX","sourceY","targetX","targetY","drx","dry","xRotation","largeArc","drawGraph","flexDirection","mb","fileDialog","accept","files","parse","allOutput","b","sum","avg","flatten","m","mt","App","tab","setTab","CssBaseline","borderRight","divider","Tabs","indicatorColor","textColor","onChange","_","orientation","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e466f986.chunk.js","sourcesContent":["import {\r\n  Agent,\r\n  Environment,\r\n  CanvasRenderer,\r\n  utils,\r\n  Vector,\r\n  Network,\r\n  LineChartRenderer,\r\n  Histogram,\r\n  KDTree,\r\n  Terrain,\r\n  TableRenderer,\r\n  Heatmap,\r\n  Colors,\r\n} from \"flocc\";\r\nimport {\r\n  assign,\r\n  clamp,\r\n  entries,\r\n  fill,\r\n  last,\r\n  noop,\r\n  range,\r\n  sumBy,\r\n  times,\r\n  values,\r\n} from \"lodash\";\r\nimport type {\r\n  Combined as Dataset,\r\n  Company,\r\n  Investor,\r\n  Posts,\r\n  Vision,\r\n} from \"method-data/types\";\r\nimport Neat from \"neataptic\";\r\nimport interpolate from \"color-interpolate\";\r\n\r\nconst { mean, distance, gaussian, random, max } = utils;\r\n\r\nexport function sign(n: number) {\r\n  return n === 0 ? 0 : n > 0 ? 1 : -1;\r\n}\r\n\r\nexport function pad<T>(array: T[], n: number) {\r\n  return assign(fill(new Array(n), 0), array);\r\n}\r\n\r\nfunction visible(self: Investor, investor: Investor, threshold: number) {\r\n  if (investor.visibility) {\r\n    const dist = distance(self, investor) / investor.visibility;\r\n    return dist < threshold;\r\n  } else return false;\r\n}\r\n\r\nexport function lastFew<T>(arr: T[], n: number) {\r\n  return arr.slice(Math.max(arr.length - n, 0));\r\n}\r\n\r\ntype SetupData = {\r\n  totalInvested: number;\r\n};\r\n\r\n/**\r\n * Must return -1<=x<=1\r\n */\r\ntype Mutator = (\r\n  self: Investor,\r\n  company: Company,\r\n  vision: Vision,\r\n  random: number\r\n) => number;\r\n\r\nconst WIDTH = 800;\r\nconst HEIGHT = 800;\r\n\r\nexport const MAX_COUNT = 1000;\r\n\r\nexport const HISTORY_STEPS = 10;\r\n\r\nconst INVESTOR_COUNT = 30;\r\nconst VISION_RADIUS = 0.2;\r\n\r\nconst SCALE = 2.25;\r\nexport class Simulator {\r\n  steps: number = 6;\r\n  currentStep: number = 2;\r\n  environment: Environment;\r\n  renderer: CanvasRenderer;\r\n  company: Agent;\r\n  results: number[] = [];\r\n  investors: Agent[] = [];\r\n  speed: number = 0;\r\n  network: Network;\r\n  constructor(\r\n    public name: string,\r\n    public dataset: { company: Company; posts: Posts },\r\n    public mutate: Mutator,\r\n    public doRestore: boolean,\r\n    public onDone: () => void = noop,\r\n    public log: (log: string) => void = noop\r\n  ) {\r\n    this.environment = new Environment({ torus: true });\r\n    this.renderer = new CanvasRenderer(this.environment, {\r\n      width: WIDTH,\r\n      height: HEIGHT,\r\n      connectionOpacity: 0.1,\r\n    });\r\n    this.network = new Network();\r\n    this.environment.use(this.network);\r\n    {\r\n      const agent = this.makeCompany({\r\n        values: [{ change: 0, value: this.dataset.company.values[0].value }],\r\n      });\r\n      this.company = agent;\r\n      this.environment.addAgent(agent);\r\n      this.network.addAgent(agent);\r\n    }\r\n    {\r\n      times(INVESTOR_COUNT, () => {\r\n        const agent = this.makeInvestor(\r\n          {\r\n            cookies: max([0, gaussian(100, 10)]),\r\n            cookiesInvested: 0,\r\n            posts: [],\r\n            visibility: max([\r\n              0,\r\n              gaussian(mean([WIDTH, HEIGHT]) / 4, WIDTH / 4),\r\n            ]),\r\n            x: gaussian(WIDTH / 2, WIDTH / 8),\r\n            y: gaussian(HEIGHT / 2, HEIGHT / 8),\r\n          },\r\n          mutate,\r\n          VISION_RADIUS\r\n        );\r\n        this.environment.addAgent(agent);\r\n        this.network.addAgent(agent);\r\n        this.network.connect(agent, this.company);\r\n        this.investors.push(agent);\r\n      });\r\n    }\r\n    {\r\n      for (const self of this.investors) {\r\n        const visibleInvestors = this.investors.filter((i) =>\r\n          visible(self.data, i.data, VISION_RADIUS)\r\n        );\r\n        for (const i of visibleInvestors) {\r\n          if (i !== self) {\r\n            this.network.connect(i, self);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (const i of range(this.currentStep)) {\r\n      this.currentStep = i;\r\n      this.tick(false);\r\n    }\r\n  }\r\n  makeVision(target: Investor, threshold: number, step: number) {\r\n    return {\r\n      company: this.company.data,\r\n      investors: this.investors\r\n        .map((i) => i.data as Investor)\r\n        .filter((i) => visible(target, i, threshold)),\r\n    };\r\n  }\r\n  makeCompany(data: Company) {\r\n    return new Agent({\r\n      ...data,\r\n      size: 2,\r\n      color: \"#00F\",\r\n      x: 80,\r\n      y: 80,\r\n    });\r\n  }\r\n  makeInvestor(data: Investor, mutate: Mutator, threshold: number) {\r\n    const investor = new Agent({\r\n      ...data,\r\n      size: 1,\r\n      color: \"#000\",\r\n      tick: (self: Agent) => {\r\n        const data: Investor = self.data;\r\n        const vision = this.makeVision(data, threshold, this.currentStep);\r\n\r\n        const company: Company = this.dataset.company;\r\n        const current = company.values[this.currentStep] ?? {\r\n          value: 0,\r\n          change: 0,\r\n        };\r\n        // Positive indicates buy,\r\n        // Negative indicates sell\r\n        const change =\r\n          mutate(data, this.company.data, vision, 0) * current.value;\r\n        if (change <= data.cookies) {\r\n          data.cookies -= change;\r\n          data.cookiesInvested += change;\r\n        }\r\n        self.set(\r\n          \"color\",\r\n          sign(change) === 0 ? \"yellow\" : sign(change) === 1 ? \"green\" : \"red\"\r\n        );\r\n        self.set(\"size\", clamp(data.cookies / 50 - 1, 0.1, 1) * (1 * 3));\r\n        self.set(data);\r\n      },\r\n    });\r\n    return investor;\r\n  }\r\n  run() {\r\n    if (this.currentStep < this.steps) {\r\n      this.tick();\r\n      if (this.speed) {\r\n        setTimeout(() => this.run(), this.speed);\r\n      } else {\r\n        requestAnimationFrame(() => this.run());\r\n      }\r\n    } else {\r\n      this.onDone();\r\n    }\r\n  }\r\n  tick(recordResult = true) {\r\n    const setupData = this.setup();\r\n    this.environment.tick();\r\n    // this.renderer.render();\r\n    const ctx = this.renderer.canvas.getContext(\"2d\")!;\r\n    ctx.font = \"24px Roboto\";\r\n    ctx.fillStyle = \"black\";\r\n    const postCount = sumBy(\r\n      this.investors,\r\n      (c) => (c.data as Investor).posts.length\r\n    );\r\n    ctx.fillText(\r\n      `DAY ${this.currentStep - 2}, ${this.name}.AX, ${postCount} tweets`,\r\n      20,\r\n      20\r\n    );\r\n    const company = this.company.data as { x: number; y: number };\r\n    const r = this.dataset.company.values[this.currentStep];\r\n    ctx.fillText(\r\n      `${this.name}.AX, ${r.value.toFixed(2)} ${\r\n        r.change ? (r.change > 0 ? \"▲\" : \"▼\") : \"-\"\r\n      }`,\r\n      company.x * SCALE + 4,\r\n      company.y * SCALE - 4\r\n    );\r\n\r\n    for (const i of this.investors) {\r\n      const investor = i.data as Investor;\r\n      const tweet = last(investor.posts);\r\n      if (tweet) {\r\n        // ctx.fillRect(0, 0, 100, 100);\r\n        ctx.fillText(\r\n          `${tweet.textSentiment >= 0 ? \"😀\" : \"🙁\"} ${tweet.text.substring(\r\n            0,\r\n            15\r\n          )}...`,\r\n          investor.x * SCALE + 4,\r\n          investor.y * SCALE - 4\r\n        );\r\n      }\r\n    }\r\n    if (recordResult) {\r\n      this.results.push(this.teardown(setupData));\r\n    }\r\n    if (this.doRestore) {\r\n      this.restore();\r\n    }\r\n    this.currentStep++;\r\n  }\r\n\r\n  setup() {\r\n    const out: SetupData = { totalInvested: this.totalInvested };\r\n    // Set posts\r\n    for (const post of this.dataset.posts.day[this.currentStep].posts) {\r\n      const agent = this.investors[random(0, this.investors.length - 1)];\r\n      const investor = agent.data as Investor;\r\n      investor.posts.push(post);\r\n      investor.posts = lastFew(investor.posts, HISTORY_STEPS);\r\n      agent.set(investor);\r\n    }\r\n    // Set company\r\n    {\r\n      const agent = this.company;\r\n      const company = agent.data as Company;\r\n      company.values.push(this.dataset.company.values[this.currentStep]);\r\n      company.values = lastFew(company.values, HISTORY_STEPS);\r\n      agent.set(company);\r\n    }\r\n    return out;\r\n  }\r\n  teardown(initial: SetupData) {\r\n    const totalInvested = this.totalInvested;\r\n    const actualChange = sign(totalInvested - initial.totalInvested);\r\n    const expectedChange =\r\n      this.dataset.company.values[this.currentStep]?.change ?? 0;\r\n    // if (actualChange === expectedChange) {\r\n    //   this.log(`Step ${this.currentStep + 1}: Correct prediction`);\r\n    // } else {\r\n    //   this.log(`Step ${this.currentStep + 1}: Incorrect prediction`);\r\n    //   if (actualChange < expectedChange) {\r\n    //     this.log(\"Price expected to rise, but actually fell\");\r\n    //   } else {\r\n    //     this.log(\"Price expected to fall, but actually rose\");\r\n    //   }\r\n    // }\r\n    return actualChange === expectedChange ? 1 : 0;\r\n  }\r\n  get totalInvested() {\r\n    let totalInvested = 0;\r\n    for (const agent of this.investors) {\r\n      const investor = agent.data as Investor;\r\n      totalInvested += investor.cookiesInvested;\r\n    }\r\n    return totalInvested;\r\n  }\r\n\r\n  restore() {}\r\n}\r\n","import * as cola from \"webcola\";\r\nimport * as d3 from \"d3\";\r\nimport \"./graph.css\";\r\n\r\nwindow.d3 = d3;\r\n\r\nvar NODE_RADIUS = 7;\r\nvar GATE_RADIUS = 2;\r\nvar REPEL_FORCE = 0;\r\nvar LINK_DISTANCE = 100;\r\n\r\nvar WIDTH = 1000;\r\nvar HEIGHT = 500;\r\n\r\nexport function drawGraph(graph: any, panel: any) {\r\n  var d3cola = cola.d3adaptor().avoidOverlaps(true).size([WIDTH, HEIGHT]);\r\n\r\n  var svg = d3.select(panel);\r\n\r\n  d3.selectAll(panel + \"> *\").remove();\r\n\r\n  // define arrow markers for graph links\r\n  svg\r\n    .append(\"svg:defs\")\r\n    .append(\"svg:marker\")\r\n    .attr(\"id\", \"end-arrow\")\r\n    .attr(\"viewBox\", \"0 -5 10 10\")\r\n    .attr(\"refX\", 6)\r\n    .attr(\"markerWidth\", 4)\r\n    .attr(\"markerHeight\", 4)\r\n    .attr(\"orient\", \"auto\")\r\n    .append(\"svg:path\")\r\n    .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n\r\n  graph.nodes.forEach((v: { height: number; width: number; name: string }) => {\r\n    v.height = v.width = 2 * (v.name === \"GATE\" ? GATE_RADIUS : NODE_RADIUS);\r\n  });\r\n\r\n  d3cola\r\n    .nodes(graph.nodes)\r\n    .links(graph.links)\r\n    .constraints(graph.constraints)\r\n    .symmetricDiffLinkLengths(REPEL_FORCE)\r\n    .linkDistance(LINK_DISTANCE)\r\n    .start(10, 15, 20);\r\n\r\n  var path = svg\r\n    .selectAll(\".link\")\r\n    .data(graph.links)\r\n    .enter()\r\n    .append(\"svg:path\")\r\n    .attr(\"class\", \"link\");\r\n\r\n  path.append(\"title\").text((d: any) => {\r\n    var text = \"\";\r\n    text += \"Weight: \" + Math.round(d.weight * 1000) / 1000 + \"\\n\";\r\n    text += \"Source: \" + d.source.id + \"\\n\";\r\n    text += \"Target: \" + d.target.id;\r\n    return text;\r\n  });\r\n\r\n  var node = svg\r\n    .selectAll(\".node\")\r\n    .data(graph.nodes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"class\", (d: any) => \"node \" + d.name)\r\n    .attr(\"r\", (d: any) => (d.name === \"GATE\" ? GATE_RADIUS : NODE_RADIUS))\r\n    .call(d3cola.drag);\r\n\r\n  node.append(\"title\").text((d: any) => {\r\n    var text = \"\";\r\n    text += \"Activation: \" + Math.round(d.activation * 1000) / 1000 + \"\\n\";\r\n    text += \"Bias: \" + Math.round(d.bias * 1000) / 1000 + \"\\n\";\r\n    text += \"Position: \" + d.id;\r\n    return text;\r\n  });\r\n\r\n  var label = svg\r\n    .selectAll(\".label\")\r\n    .data(graph.nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"class\", \"label\")\r\n    .text((d: any) => \"(\" + d.index + \") \" + d.name)\r\n    .call(d3cola.drag);\r\n\r\n  d3cola.on(\"tick\", () => {\r\n    // draw directed edges with proper padding from node centers\r\n    path.attr(\"d\", (d: any) => {\r\n      var deltaX = d.target.x - d.source.x;\r\n      var deltaY = d.target.y - d.source.y;\r\n      var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n      var normX = deltaX / dist;\r\n      var normY = deltaY / dist;\r\n\r\n      if (isNaN(normX)) normX = 0;\r\n      if (isNaN(normY)) normY = 0;\r\n\r\n      var sourcePadding = d.source.width / 2;\r\n      var targetPadding = d.target.width / 2 + 2;\r\n      var sourceX = d.source.x + sourcePadding * normX;\r\n      var sourceY = d.source.y + sourcePadding * normY;\r\n      var targetX = d.target.x - targetPadding * normX;\r\n      var targetY = d.target.y - targetPadding * normY;\r\n\r\n      // Defaults for normal edge.\r\n      var drx = 0;\r\n      var dry = 0;\r\n      var xRotation = 0; // degrees\r\n      var largeArc = 0; // 1 or 0\r\n      var sweep = 1; // 1 or 0\r\n\r\n      // Self edge.\r\n      if (d.source.x === d.target.x && d.source.y === d.target.y) {\r\n        xRotation = -45;\r\n        largeArc = 1;\r\n        drx = 20;\r\n        dry = 20;\r\n        targetX = targetX + 1;\r\n        targetY = targetY + 1;\r\n      }\r\n      return (\r\n        \"M\" +\r\n        sourceX +\r\n        \",\" +\r\n        sourceY +\r\n        \"A\" +\r\n        drx +\r\n        \",\" +\r\n        dry +\r\n        \" \" +\r\n        xRotation +\r\n        \",\" +\r\n        largeArc +\r\n        \",\" +\r\n        sweep +\r\n        \" \" +\r\n        targetX +\r\n        \",\" +\r\n        targetY\r\n      );\r\n    });\r\n\r\n    node.attr(\"cx\", (d: any) => d.x).attr(\"cy\", (d: any) => d.y);\r\n    label.attr(\"x\", (d: any) => d.x + 10).attr(\"y\", (d: any) => d.y - 10);\r\n  });\r\n}\r\n","import { clamp, mean, range } from \"lodash\";\r\nimport { Neat, methods } from \"neataptic\";\r\n\r\nexport class Brain {\r\n  neat: Neat;\r\n  speed: number = 0;\r\n  iterations: number = 11;\r\n  fittest = { model: undefined, score: 0 };\r\n  constructor(\r\n    public run: (\r\n      mutator: (input: number[]) => number,\r\n      speed: number\r\n    ) => Promise<number>,\r\n    public report: (obj: {\r\n      fitness?: number;\r\n      generation?: number;\r\n      currentFitness?: number;\r\n    }) => void\r\n  ) {\r\n    this.neat = new Neat(43, 1, undefined, {\r\n      mutation: methods.mutation.ALL,\r\n      elitism: 0.1,\r\n      equal: true,\r\n    });\r\n  }\r\n\r\n  async startEvaluation() {\r\n    for (const g in this.neat.population) {\r\n      const genome = this.neat.population[g];\r\n      const scores = [];\r\n      for (const _ of range(this.iterations)) {\r\n        scores.push(\r\n          await this.run((dataset) => genome.activate(dataset), this.speed)\r\n        );\r\n      }\r\n      genome.score = mean(scores);\r\n      if (genome.score > this.fittest.score) {\r\n        this.fittest = {\r\n          model: genome,\r\n          score: genome.score,\r\n        };\r\n      }\r\n      this.report({ currentFitness: genome.score });\r\n    }\r\n  }\r\n\r\n  endEvaluation() {\r\n    console.log(\r\n      \"Generation:\",\r\n      this.neat.generation,\r\n      \"- average score:\",\r\n      this.neat.getAverage()\r\n    );\r\n\r\n    this.report({\r\n      fitness: this.neat.getAverage(),\r\n      generation: this.neat.generation,\r\n    });\r\n\r\n    this.neat.sort();\r\n    let newPopulation = [];\r\n\r\n    // Elitism\r\n    for (let i = 0; i < this.neat.elitism; i++) {\r\n      newPopulation.push(this.neat.population[i]);\r\n    }\r\n\r\n    // Breed the next individuals\r\n    for (let i = 0; i < this.neat.popsize - this.neat.elitism; i++) {\r\n      newPopulation.push(this.neat.getOffspring());\r\n    }\r\n\r\n    // Replace the old population with the new population\r\n    this.neat.population = newPopulation;\r\n    this.neat.mutate();\r\n  }\r\n\r\n  evolve() {\r\n    this.neat.generation++;\r\n  }\r\n\r\n  private stopped = false;\r\n  stop() {\r\n    this.stopped = true;\r\n  }\r\n\r\n  async train() {\r\n    for (let i = 0; i < 100; i += 1) {\r\n      if (!this.stopped) {\r\n        await this.startEvaluation();\r\n        this.endEvaluation();\r\n        this.evolve();\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateFitness(input: number[], output: number) {\r\n    return 1;\r\n  }\r\n}\r\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport { entries, every, keys, mean, noop, random, round } from \"lodash\";\r\nimport dataset from \"method-data/dataset.json\";\r\nimport { Brain } from \"./Brain\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Link,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport download from \"downloadjs\";\r\nimport { createInputArray } from \"./createInputArray\";\r\n\r\nconst TRAIN_DOCS_URL =\r\n  \"https://github.com/Spaaaacccee/research-assignment-method/blob/master/docs/train.md\";\r\n\r\nconst codes = entries(dataset.posts)\r\n  .slice(0, 50)\r\n  .filter(([_, posts]) => !every(posts.day, (p) => !p.posts.length))\r\n  .map(([code]) => code);\r\n\r\nfunction randItem<T>(items: T[]) {\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport function lastFew<T>(arr: T[], n: number) {\r\n  return arr.slice(Math.max(arr.length - n, 0));\r\n}\r\n\r\ntype SimulationInfo = {\r\n  currentFitness?: number;\r\n  fitness?: number;\r\n  generation?: number;\r\n  currentCompany?: string;\r\n  currentPrice?: string;\r\n  currentDelta?: string;\r\n};\r\n\r\nexport default function Simulation() {\r\n  const theme = useTheme();\r\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\r\n  const [info, setInfo] = useReducer(\r\n    (prev: SimulationInfo, next: SimulationInfo) => ({ ...prev, ...next }),\r\n    { fitness: 0, generation: undefined }\r\n  );\r\n  const [speed, setSpeed] = useState(0);\r\n  const [log, addLog] = useReducer(\r\n    (prev: string[], action: string) => lastFew([...prev, action], 100),\r\n    [\"Simulation started\"]\r\n  );\r\n  const brainRef = useRef<Brain | undefined>(undefined);\r\n  const simulatorRef = useRef<Simulator | undefined>(undefined);\r\n  useEffect(() => {\r\n    if (ref) {\r\n      const brain = new Brain(\r\n        (mutator, speed) => {\r\n          return new Promise((res) => {\r\n            ref.innerHTML = \"\";\r\n            const code = randItem(codes);\r\n            // addLog(`Simulating ${code}`);\r\n            setInfo({ currentCompany: code });\r\n            const simulator = new Simulator(\r\n              code,\r\n              {\r\n                company: dataset.prices[code as keyof typeof dataset[\"prices\"]],\r\n                posts: dataset.posts[code as keyof typeof dataset[\"prices\"]],\r\n              },\r\n              (investor, company, vision) => {\r\n                // return random(-1, 1, true);\r\n                // Encode information into array of 0..1 floats\r\n                const input: number[] = createInputArray(\r\n                  investor,\r\n                  company,\r\n                  vision\r\n                );\r\n                // Returns 0..1\r\n                const out = mutator(input);\r\n                // Remap to -1..1\r\n                return out * 2 - 1;\r\n              },\r\n              true,\r\n              () => {\r\n                const results = mean(simulator.results);\r\n                res(results);\r\n              },\r\n              (msg) => addLog(msg)\r\n            );\r\n            simulator.speed = speed;\r\n            simulator.renderer.mount(ref);\r\n            simulator.run();\r\n            simulatorRef.current = simulator;\r\n          });\r\n        },\r\n        ({ fitness, generation, currentFitness }) => {\r\n          if (generation !== undefined) {\r\n            addLog(\r\n              `Generation ${generation}: ${((fitness ?? 0) * 100).toFixed(\r\n                2\r\n              )}% accurate`\r\n            );\r\n          }\r\n          if (fitness) {\r\n            setInfo({ fitness });\r\n          }\r\n          if (generation) {\r\n            setInfo({ generation });\r\n          }\r\n          if (currentFitness) {\r\n            setInfo({ currentFitness });\r\n          }\r\n        }\r\n      );\r\n\r\n      brain.train();\r\n      brainRef.current = brain;\r\n      return () => {\r\n        ref.innerHTML = \"\";\r\n        brain.stop();\r\n      };\r\n    }\r\n    return noop;\r\n  }, [ref, setInfo, brainRef, simulatorRef, addLog]);\r\n  useEffect(() => {\r\n    if (brainRef.current && simulatorRef.current) {\r\n      const brain = brainRef.current;\r\n      const simulator = simulatorRef.current;\r\n      brain.speed = speed;\r\n      simulator.speed = speed;\r\n    }\r\n  }, [brainRef, simulatorRef, speed]);\r\n  return (\r\n    <Box display=\"flex\" height=\"100%\">\r\n      <Box\r\n        bgcolor={theme.palette.background.paper}\r\n        width={300}\r\n        pl={2}\r\n        overflow=\"auto\"\r\n      >\r\n        <Box p={2} pt={3}>\r\n          <Typography display=\"block\" variant=\"h6\" gutterBottom>\r\n            Train\r\n          </Typography>\r\n          <Typography\r\n            display=\"block\"\r\n            variant=\"caption\"\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n          >\r\n            This page trains an evolutionary neural network to make decisions as\r\n            an investor.\r\n            <br />\r\n            <Link href={TRAIN_DOCS_URL} target=\"_blank\" rel=\"noopener\">\r\n              More\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Speed\r\n          </Typography>\r\n          <ButtonGroup\r\n            // color=\"primary\"\r\n            aria-label=\"outlined primary button group\"\r\n          >\r\n            <Button onClick={() => setSpeed(0)} disabled={speed === 0}>\r\n              1.0x\r\n            </Button>\r\n            <Button onClick={() => setSpeed(100)} disabled={speed === 100}>\r\n              0.5x\r\n            </Button>\r\n            <Button onClick={() => setSpeed(1000)} disabled={speed === 1000}>\r\n              0.1x\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Box>\r\n        <Box p={2} pr={4}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Actions\r\n          </Typography>\r\n          <Box pb={1}>\r\n            <Button\r\n              disabled={(info.generation ?? 0) < 1}\r\n              onClick={() => {\r\n                if (brainRef.current) {\r\n                  const brain = brainRef.current;\r\n                  if (brain.fittest.model) {\r\n                    download(\r\n                      new Blob([\r\n                        JSON.stringify((brain?.fittest?.model as any).toJSON()),\r\n                      ]),\r\n                      \"model.json\",\r\n                      \"application/json\"\r\n                    );\r\n                  }\r\n                }\r\n              }}\r\n              variant=\"outlined\"\r\n            >\r\n              Export fittest\r\n            </Button>\r\n          </Box>\r\n          <Typography variant=\"caption\" color=\"textSecondary\" display=\"block\">\r\n            Exporting the fittest genome is available after generation 1\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Log\r\n          </Typography>\r\n          {log.map((l) => (\r\n            <div>\r\n              <code>{l}</code>\r\n            </div>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n      <Box bgcolor={theme.palette.background.paper} pl={2} pr={1} width={160}>\r\n        <List>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={info.generation !== undefined ? info.generation : \"-\"}\r\n              secondary=\"Generation\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={\r\n                info.fitness ? `${(info.fitness * 100).toFixed(2)}%` : \"-\"\r\n              }\r\n              secondary=\"Fitness\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={\r\n                info.currentFitness\r\n                  ? `${(info.currentFitness * 100).toFixed(2)}%`\r\n                  : \"-\"\r\n              }\r\n              secondary=\"Current Fitness\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={`${info.currentCompany}.AX` ?? \"-\"}\r\n              secondary=\"Company\"\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Box>\r\n      <Box\r\n        flex={1}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        bgcolor={theme.palette.background.default}\r\n        overflow=\"auto\"\r\n        height=\"100%\"\r\n      >\r\n        <div ref={(e) => setRef(e)}></div>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { flatMap } from \"lodash\";\r\nimport { MAX_COUNT, pad, HISTORY_STEPS, sign } from \"./Simulator\";\r\nimport { Investor, Company, Vision } from \"method-data/types\";\r\nimport { lastFew } from \"./Simulation\";\r\n\r\nexport function createInputArray(\r\n  investor: Investor,\r\n  company: Company,\r\n  vision: Vision\r\n): number[] {\r\n  return [\r\n    investor.cookies / MAX_COUNT,\r\n    investor.cookiesInvested / MAX_COUNT,\r\n    // Company info\r\n    ...pad(\r\n      company.values.map((c) => (c?.change ?? 0 + 1) * 0.5),\r\n      HISTORY_STEPS\r\n    ),\r\n    // Vision info\r\n    ...pad(\r\n      flatMap(lastFew(vision.investors, 3), (i) => [\r\n        ...pad(\r\n          i.posts.map((p) => p.favoriteCount / MAX_COUNT),\r\n          HISTORY_STEPS\r\n        ),\r\n        ...pad(\r\n          i.posts.map((p) => p.retweetCount / MAX_COUNT),\r\n          HISTORY_STEPS\r\n        ),\r\n        ...pad(\r\n          i.posts.map((p) => sign(p.textSentiment) / MAX_COUNT),\r\n          HISTORY_STEPS\r\n        ),\r\n      ]),\r\n      HISTORY_STEPS * 3\r\n    ),\r\n  ];\r\n}\r\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport {\r\n  defer,\r\n  entries,\r\n  every,\r\n  flatMap,\r\n  flatten,\r\n  keys,\r\n  mean,\r\n  noop,\r\n  random,\r\n  round,\r\n  sum,\r\n} from \"lodash\";\r\nimport dataset from \"method-data/dataset.json\";\r\nimport { Brain } from \"./Brain\";\r\nimport { Simulator, MAX_COUNT, pad, HISTORY_STEPS, sign } from \"./Simulator\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Link,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport download from \"downloadjs\";\r\nimport fileDialog from \"file-dialog\";\r\nimport { Network } from \"neataptic\";\r\nimport { drawGraph } from \"./graph\";\r\nimport { createInputArray } from \"./createInputArray\";\r\n\r\nconst INSPECT_DOCS_URL =\r\n  \"https://github.com/Spaaaacccee/research-assignment-method/blob/master/docs/inspect.md\";\r\n\r\nconst codes = entries(dataset.posts)\r\n  .slice(50, 100)\r\n  .filter(([_, posts]) => !every(posts.day, (p) => !p.posts.length))\r\n  .map(([code]) => code);\r\n\r\ntype Key = keyof typeof dataset[\"prices\"];\r\n\r\nfunction randItem<T>(items: T[]) {\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nfunction lastFew<T>(arr: T[], n: number) {\r\n  return arr.slice(Math.max(arr.length - n, 0));\r\n}\r\n\r\ntype SimulationInfo = {\r\n  currentFitness?: number;\r\n  fitness?: number;\r\n  generation?: number;\r\n  currentCompany?: string;\r\n  currentPrice?: string;\r\n  currentDelta?: string;\r\n};\r\n\r\nexport default function Inspector() {\r\n  const theme = useTheme();\r\n  const [ref, setRef] = useState<SVGElement | null>(null);\r\n  const [model, setModel] = useState<any>(undefined);\r\n  const [info, setInfo] = useReducer(\r\n    (prev: SimulationInfo, next: SimulationInfo) => ({ ...prev, ...next }),\r\n    { fitness: 0, generation: 0 }\r\n  );\r\n  const brainRef = useRef<Brain | undefined>(undefined);\r\n  const simulatorRef = useRef<Simulator | undefined>(undefined);\r\n  const [loading, setLoading] = useState(false);\r\n  const [log, addLog] = useReducer(\r\n    (prev: string[], action: string) => lastFew([...prev, action], 100),\r\n    [\"Import a model to get started\"]\r\n  );\r\n  useEffect(() => {\r\n    if (model && ref) {\r\n      try {\r\n        const network = Network.fromJSON(model);\r\n        defer(() => drawGraph(network.graph(3200, 800), `#${ref.id}`));\r\n        addLog(\"Model loaded\");\r\n      } catch (e) {\r\n        addLog(\"Couldn't load the model\");\r\n      }\r\n    }\r\n  }, [model, ref]);\r\n  return (\r\n    <Box display=\"flex\" height=\"100%\">\r\n      <Box\r\n        bgcolor={theme.palette.background.paper}\r\n        width={300}\r\n        pl={2}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n      >\r\n        <Box p={2} pt={3}>\r\n          <Typography display=\"block\" variant=\"h6\" gutterBottom>\r\n            Inspect\r\n          </Typography>\r\n          <Typography\r\n            display=\"block\"\r\n            variant=\"caption\"\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n          >\r\n            This page provides tools inspect a trained model and measure its\r\n            effectiveness.\r\n            <br />\r\n            <Link href={INSPECT_DOCS_URL} target=\"_blank\" rel=\"noopener\">\r\n              More\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2} pr={4}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Actions\r\n          </Typography>\r\n          <Box pb={1}>\r\n            <Box mb={1}>\r\n              <Button\r\n                disabled={loading}\r\n                onClick={async () => {\r\n                  try {\r\n                    const files = await fileDialog({\r\n                      accept: \"application/json\",\r\n                    });\r\n                    if (files?.[0]) {\r\n                      const text = await files?.[0].text();\r\n                      setModel(JSON.parse(text));\r\n                    }\r\n                  } catch {\r\n                    addLog(\"Couldn't read the file\");\r\n                  }\r\n                }}\r\n                variant=\"outlined\"\r\n              >\r\n                Import model\r\n              </Button>\r\n            </Box>\r\n            <Box>\r\n              <Button\r\n                disabled={!model || loading}\r\n                variant=\"outlined\"\r\n                onClick={async () => {\r\n                  const allOutput: { code: string; results: number[] }[] = [];\r\n                  const network = Network.fromJSON(model);\r\n                  setLoading(true);\r\n                  for (const code of codes) {\r\n                    await new Promise<void>((res) => {\r\n                      const simulator = new Simulator(\r\n                        code,\r\n                        {\r\n                          company: dataset.prices[code as Key],\r\n                          posts: dataset.posts[code as Key],\r\n                        },\r\n                        (a, b, c) => {\r\n                          const input = createInputArray(a, b, c);\r\n                          const output = network.activate(input);\r\n                          // Remap to -1..1\r\n                          return output * 2 - 1;\r\n                        },\r\n                        true,\r\n                        () => {\r\n                          allOutput.push({ code, results: simulator.results });\r\n                          addLog(\r\n                            `${code}.AX: ${sum(simulator.results)}/${\r\n                              simulator.results.length\r\n                            }`\r\n                          );\r\n                          res();\r\n                        }\r\n                      );\r\n                      simulator.run();\r\n                    });\r\n                  }\r\n                  console.log(allOutput);\r\n                  const avg = mean(flatten(allOutput.map((c) => c.results)));\r\n                  addLog(`Model has ${(avg * 100).toFixed(2)}% accuracy`);\r\n                  setLoading(false);\r\n                }}\r\n              >\r\n                {loading ? \"Running\" : \"Evaluate Model\"}\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          p={2}\r\n          flex={1}\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          overflow=\"hidden\"\r\n        >\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Log\r\n          </Typography>\r\n          <Box overflow=\"auto\" flex={1} m={-2} p={2} mt={0} pt={0}>\r\n            {log.map((l) => (\r\n              <div>\r\n                <code>{l}</code>\r\n              </div>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        flex={1}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        bgcolor={theme.palette.background.default}\r\n        overflow=\"auto\"\r\n        height=\"100%\"\r\n      >\r\n        <svg ref={(e) => setRef(e)} id=\"graph\" width=\"100%\" height=\"100%\"></svg>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import {\n  Box,\n  CssBaseline,\n  Paper,\n  Tab,\n  Tabs,\n  useTheme,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Inspector from \"./Inspector\";\nimport Simulation from \"./Simulation\";\n\nfunction App() {\n  const theme = useTheme();\n  const [tab, setTab] = useState(\"train\");\n  return (\n    <CssBaseline>\n      <Box height=\"100vh\" display=\"flex\">\n        <Box\n          bgcolor={theme.palette.background.paper}\n          pt={2}\n          borderRight={`1px solid ${theme.palette.divider}`}\n        >\n          <Tabs\n            value={tab}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, v) => setTab(v)}\n            orientation=\"vertical\"\n          >\n            <Tab label=\"Train\" value=\"train\" />\n            <Tab label=\"Inspect\" value=\"inspect\" />\n          </Tabs>\n        </Box>\n        <Box flex={1}>\n          {tab === \"train\" && <Simulation />}\n          {tab === \"inspect\" && <Inspector />}\n        </Box>\n      </Box>\n    </CssBaseline>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}