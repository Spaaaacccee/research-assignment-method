{"version":3,"sources":["Brain.tsx","Simulator.tsx","Simulation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Brain","run","report","neat","speed","iterations","fittest","model","undefined","score","this","Neat","mutation","methods","ALL","elitism","equal","a","g","genome","population","scores","range","dataset","activate","push","mean","currentFitness","console","log","generation","getAverage","fitness","sort","newPopulation","i","popsize","getOffspring","mutate","startEvaluation","endEvaluation","evolve","input","output","utils","distance","gaussian","random","max","sign","n","pad","array","assign","fill","Array","visible","self","investor","threshold","visibility","lastFew","arr","slice","Math","length","WIDTH","HEIGHT","MAX_COUNT","HISTORY_STEPS","VISION_RADIUS","SCALE","Simulator","name","doRestore","onDone","noop","steps","currentStep","environment","renderer","company","results","investors","network","Environment","torus","CanvasRenderer","width","height","connectionOpacity","Network","use","agent","makeCompany","values","change","value","addAgent","times","makeInvestor","cookies","cookiesInvested","posts","x","y","connect","visibleInvestors","filter","data","tick","target","step","map","Agent","size","color","vision","makeVision","current","set","clamp","setTimeout","requestAnimationFrame","recordResult","setupData","setup","ctx","canvas","getContext","font","fillStyle","postCount","sumBy","c","fillText","r","toFixed","tweet","last","textSentiment","text","substring","teardown","restore","out","totalInvested","day","post","initial","codes","entries","every","p","Simulation","theme","useTheme","useState","ref","setRef","useReducer","prev","next","info","setInfo","setSpeed","action","addLog","brainRef","useRef","simulatorRef","useEffect","brain","mutator","Promise","res","innerHTML","items","code","floor","currentCompany","simulator","prices","flatMap","favoriteCount","retweetCount","msg","mount","train","Box","display","flex","alignItems","justifyContent","bgcolor","palette","background","default","overflow","e","paper","pl","pr","List","ListItem","ListItemText","primary","secondary","Typography","variant","gutterBottom","ButtonGroup","aria-label","Button","onClick","disabled","pb","download","Blob","JSON","stringify","toJSON","l","App","CssBaseline","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9143726e.chunk.js","sourcesContent":["import { clamp, mean, range } from \"lodash\";\r\nimport { Neat, methods } from \"neataptic\";\r\n\r\nexport class Brain {\r\n  neat: Neat;\r\n  speed: number = 0;\r\n  iterations: number = 11;\r\n  fittest = { model: undefined, score: 0 };\r\n  constructor(\r\n    public run: (\r\n      mutator: (input: number[]) => number,\r\n      speed: number\r\n    ) => Promise<number>,\r\n    public report: (obj: {\r\n      fitness?: number;\r\n      generation?: number;\r\n      currentFitness?: number;\r\n    }) => void\r\n  ) {\r\n    this.neat = new Neat(52, 1, undefined, {\r\n      mutation: methods.mutation.ALL,\r\n      elitism: 0.1,\r\n      equal: true,\r\n    });\r\n  }\r\n\r\n  async startEvaluation() {\r\n    for (const g in this.neat.population) {\r\n      const genome = this.neat.population[g];\r\n      const scores = [];\r\n      for (const _ of range(this.iterations)) {\r\n        scores.push(\r\n          await this.run((dataset) => genome.activate(dataset), this.speed)\r\n        );\r\n      }\r\n      genome.score = mean(scores);\r\n      if (genome.score > this.fittest.score) {\r\n        this.fittest = {\r\n          model: genome,\r\n          score: genome.score,\r\n        };\r\n      }\r\n      this.report({ currentFitness: genome.score });\r\n    }\r\n  }\r\n\r\n  endEvaluation() {\r\n    console.log(\r\n      \"Generation:\",\r\n      this.neat.generation,\r\n      \"- average score:\",\r\n      this.neat.getAverage()\r\n    );\r\n\r\n    this.report({\r\n      fitness: this.neat.getAverage(),\r\n      generation: this.neat.generation,\r\n    });\r\n\r\n    this.neat.sort();\r\n    let newPopulation = [];\r\n\r\n    // Elitism\r\n    for (let i = 0; i < this.neat.elitism; i++) {\r\n      newPopulation.push(this.neat.population[i]);\r\n    }\r\n\r\n    // Breed the next individuals\r\n    for (let i = 0; i < this.neat.popsize - this.neat.elitism; i++) {\r\n      newPopulation.push(this.neat.getOffspring());\r\n    }\r\n\r\n    // Replace the old population with the new population\r\n    this.neat.population = newPopulation;\r\n    this.neat.mutate();\r\n  }\r\n\r\n  evolve() {\r\n    this.neat.generation++;\r\n  }\r\n\r\n  async train() {\r\n    for (let i = 0; i < 100; i += 1) {\r\n      await this.startEvaluation();\r\n      this.endEvaluation();\r\n      this.evolve();\r\n    }\r\n  }\r\n\r\n  calculateFitness(input: number[], output: number) {\r\n    return 1;\r\n  }\r\n}\r\n","import {\r\n  Agent,\r\n  Environment,\r\n  CanvasRenderer,\r\n  utils,\r\n  Vector,\r\n  Network,\r\n  LineChartRenderer,\r\n  Histogram,\r\n  KDTree,\r\n  Terrain,\r\n  TableRenderer,\r\n  Heatmap,\r\n  Colors,\r\n} from \"flocc\";\r\nimport {\r\n  assign,\r\n  clamp,\r\n  entries,\r\n  fill,\r\n  last,\r\n  noop,\r\n  range,\r\n  sumBy,\r\n  times,\r\n  values,\r\n} from \"lodash\";\r\nimport type {\r\n  Combined as Dataset,\r\n  Company,\r\n  Investor,\r\n  Posts,\r\n  Vision,\r\n} from \"method-data/types\";\r\nimport Neat from \"neataptic\";\r\nimport interpolate from \"color-interpolate\";\r\n\r\nconst { mean, distance, gaussian, random, max } = utils;\r\n\r\nexport function sign(n: number) {\r\n  return n === 0 ? 0 : n > 0 ? 1 : -1;\r\n}\r\n\r\nexport function pad<T>(array: T[], n: number) {\r\n  return assign(fill(new Array(n), 0), array);\r\n}\r\n\r\nfunction visible(self: Investor, investor: Investor, threshold: number) {\r\n  if (investor.visibility) {\r\n    const dist = distance(self, investor) / investor.visibility;\r\n    return dist < threshold;\r\n  } else return false;\r\n}\r\n\r\nexport function lastFew<T>(arr: T[], n: number) {\r\n  return arr.slice(Math.max(arr.length - n, 0));\r\n}\r\n\r\ntype SetupData = {\r\n  totalInvested: number;\r\n};\r\n\r\n/**\r\n * Must return -1<=x<=1\r\n */\r\ntype Mutator = (\r\n  self: Investor,\r\n  company: Company,\r\n  vision: Vision,\r\n  random: number\r\n) => number;\r\n\r\nconst WIDTH = 800;\r\nconst HEIGHT = 800;\r\n\r\nexport const MAX_COUNT = 1000;\r\n\r\nexport const HISTORY_STEPS = 10;\r\n\r\nconst INVESTOR_COUNT = 30;\r\nconst VISION_RADIUS = 0.2;\r\n\r\nconst SCALE = 2.25;\r\nexport class Simulator {\r\n  steps: number = 6;\r\n  currentStep: number = 2;\r\n  environment: Environment;\r\n  renderer: CanvasRenderer;\r\n  company: Agent;\r\n  results: number[] = [];\r\n  investors: Agent[] = [];\r\n  speed: number = 0;\r\n  network: Network;\r\n  constructor(\r\n    public name: string,\r\n    public dataset: { company: Company; posts: Posts },\r\n    public mutate: Mutator,\r\n    public doRestore: boolean,\r\n    public onDone: () => void = noop,\r\n    public log: (log: string) => void = noop\r\n  ) {\r\n    this.environment = new Environment({ torus: true });\r\n    this.renderer = new CanvasRenderer(this.environment, {\r\n      width: WIDTH,\r\n      height: HEIGHT,\r\n      connectionOpacity: 0.1,\r\n    });\r\n    this.network = new Network();\r\n    this.environment.use(this.network);\r\n    {\r\n      const agent = this.makeCompany({\r\n        values: [{ change: 0, value: this.dataset.company.values[0].value }],\r\n      });\r\n      this.company = agent;\r\n      this.environment.addAgent(agent);\r\n      this.network.addAgent(agent);\r\n    }\r\n    {\r\n      times(INVESTOR_COUNT, () => {\r\n        const agent = this.makeInvestor(\r\n          {\r\n            cookies: max([0, gaussian(100, 10)]),\r\n            cookiesInvested: 0,\r\n            posts: [],\r\n            visibility: max([\r\n              0,\r\n              gaussian(mean([WIDTH, HEIGHT]) / 4, WIDTH / 4),\r\n            ]),\r\n            x: gaussian(WIDTH / 2, WIDTH / 8),\r\n            y: gaussian(HEIGHT / 2, HEIGHT / 8),\r\n          },\r\n          mutate,\r\n          VISION_RADIUS\r\n        );\r\n        this.environment.addAgent(agent);\r\n        this.network.addAgent(agent);\r\n        this.network.connect(agent, this.company);\r\n        this.investors.push(agent);\r\n      });\r\n    }\r\n    {\r\n      for (const self of this.investors) {\r\n        const visibleInvestors = this.investors.filter((i) =>\r\n          visible(self.data, i.data, VISION_RADIUS)\r\n        );\r\n        for (const i of visibleInvestors) {\r\n          if (i !== self) {\r\n            this.network.connect(i, self);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (const i of range(this.currentStep)) {\r\n      this.currentStep = i;\r\n      this.tick(false);\r\n    }\r\n  }\r\n  makeVision(target: Investor, threshold: number, step: number) {\r\n    return {\r\n      company: this.company.data,\r\n      investors: this.investors\r\n        .map((i) => i.data as Investor)\r\n        .filter((i) => visible(target, i, threshold)),\r\n    };\r\n  }\r\n  makeCompany(data: Company) {\r\n    return new Agent({\r\n      ...data,\r\n      size: 2,\r\n      color: \"#00F\",\r\n      x: 80,\r\n      y: 80,\r\n    });\r\n  }\r\n  makeInvestor(data: Investor, mutate: Mutator, threshold: number) {\r\n    const investor = new Agent({\r\n      ...data,\r\n      size: 1,\r\n      color: \"#000\",\r\n      tick: (self: Agent) => {\r\n        const data: Investor = self.data;\r\n        const vision = this.makeVision(data, threshold, this.currentStep);\r\n\r\n        const company: Company = this.dataset.company;\r\n        const current = company.values[this.currentStep] ?? {\r\n          value: 0,\r\n          change: 0,\r\n        };\r\n        // Positive indicates buy,\r\n        // Negative indicates sell\r\n        const change =\r\n          mutate(data, this.company.data, vision, 0) * current.value;\r\n        if (change <= data.cookies) {\r\n          data.cookies -= change;\r\n          data.cookiesInvested += change;\r\n        }\r\n        self.set(\r\n          \"color\",\r\n          sign(change) === 0 ? \"yellow\" : sign(change) === 1 ? \"green\" : \"red\"\r\n        );\r\n        self.set(\"size\", clamp(data.cookies / 50 - 1, 0.1, 1) * (1 * 3));\r\n        self.set(data);\r\n      },\r\n    });\r\n    return investor;\r\n  }\r\n  run() {\r\n    if (this.currentStep < this.steps) {\r\n      this.tick();\r\n      if (this.speed) {\r\n        setTimeout(() => this.run(), this.speed);\r\n      } else {\r\n        requestAnimationFrame(() => this.run());\r\n      }\r\n    } else {\r\n      this.onDone();\r\n    }\r\n  }\r\n  tick(recordResult = true) {\r\n    const setupData = this.setup();\r\n    this.environment.tick();\r\n    // this.renderer.render();\r\n    const ctx = this.renderer.canvas.getContext(\"2d\")!;\r\n    ctx.font = \"24px Roboto\";\r\n    ctx.fillStyle = \"black\";\r\n    const postCount = sumBy(\r\n      this.investors,\r\n      (c) => (c.data as Investor).posts.length\r\n    );\r\n    ctx.fillText(\r\n      `DAY ${this.currentStep - 2}, ${this.name}.AX, ${postCount} tweets`,\r\n      20,\r\n      20\r\n    );\r\n    const company = this.company.data as { x: number; y: number };\r\n    const r = this.dataset.company.values[this.currentStep];\r\n    ctx.fillText(\r\n      `${this.name}.AX, ${r.value.toFixed(2)} ${\r\n        r.change ? (r.change > 0 ? \"▲\" : \"▼\") : \"-\"\r\n      }`,\r\n      company.x * SCALE + 4,\r\n      company.y * SCALE - 4\r\n    );\r\n\r\n    for (const i of this.investors) {\r\n      const investor = i.data as Investor;\r\n      const tweet = last(investor.posts);\r\n      if (tweet) {\r\n        // ctx.fillRect(0, 0, 100, 100);\r\n        ctx.fillText(\r\n          `${tweet.textSentiment >= 0 ? \"😀\" : \"🙁\"} ${tweet.text.substring(\r\n            0,\r\n            15\r\n          )}...`,\r\n          investor.x * SCALE + 4,\r\n          investor.y * SCALE - 4\r\n        );\r\n      }\r\n    }\r\n    if (recordResult) {\r\n      this.results.push(this.teardown(setupData));\r\n    }\r\n    if (this.doRestore) {\r\n      this.restore();\r\n    }\r\n    this.currentStep++;\r\n  }\r\n\r\n  setup() {\r\n    const out: SetupData = { totalInvested: this.totalInvested };\r\n    // Set posts\r\n    for (const post of this.dataset.posts.day[this.currentStep].posts) {\r\n      const agent = this.investors[random(0, this.investors.length - 1)];\r\n      const investor = agent.data as Investor;\r\n      investor.posts.push(post);\r\n      investor.posts = lastFew(investor.posts, HISTORY_STEPS);\r\n      agent.set(investor);\r\n    }\r\n    // Set company\r\n    {\r\n      const agent = this.company;\r\n      const company = agent.data as Company;\r\n      company.values.push(this.dataset.company.values[this.currentStep]);\r\n      company.values = lastFew(company.values, HISTORY_STEPS);\r\n      agent.set(company);\r\n    }\r\n    return out;\r\n  }\r\n  teardown(initial: SetupData) {\r\n    const totalInvested = this.totalInvested;\r\n    const actualChange = sign(totalInvested - initial.totalInvested);\r\n    const expectedChange =\r\n      this.dataset.company.values[this.currentStep]?.change ?? 0;\r\n    // if (actualChange === expectedChange) {\r\n    //   this.log(`Step ${this.currentStep + 1}: Correct prediction`);\r\n    // } else {\r\n    //   this.log(`Step ${this.currentStep + 1}: Incorrect prediction`);\r\n    //   if (actualChange < expectedChange) {\r\n    //     this.log(\"Price expected to rise, but actually fell\");\r\n    //   } else {\r\n    //     this.log(\"Price expected to fall, but actually rose\");\r\n    //   }\r\n    // }\r\n    return actualChange === expectedChange ? 1 : 0;\r\n  }\r\n  get totalInvested() {\r\n    let totalInvested = 0;\r\n    for (const agent of this.investors) {\r\n      const investor = agent.data as Investor;\r\n      totalInvested += investor.cookiesInvested;\r\n    }\r\n    return totalInvested;\r\n  }\r\n\r\n  restore() {}\r\n}\r\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport {\r\n  entries,\r\n  every,\r\n  flatMap,\r\n  keys,\r\n  mean,\r\n  noop,\r\n  random,\r\n  round,\r\n} from \"lodash\";\r\nimport dataset from \"method-data/dataset.json\";\r\nimport { Brain } from \"./Brain\";\r\nimport { Simulator, MAX_COUNT, pad, HISTORY_STEPS, sign } from \"./Simulator\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport download from \"downloadjs\";\r\n\r\nconst codes = entries(dataset.posts)\r\n  .filter(([_, posts]) => !every(posts.day, (p) => !p.posts.length))\r\n  .map(([code]) => code);\r\n\r\nfunction randItem<T>(items: T[]) {\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nfunction lastFew<T>(arr: T[], n: number) {\r\n  return arr.slice(Math.max(arr.length - n, 0));\r\n}\r\n\r\ntype SimulationInfo = {\r\n  currentFitness?: number;\r\n  fitness?: number;\r\n  generation?: number;\r\n  currentCompany?: string;\r\n  currentPrice?: string;\r\n  currentDelta?: string;\r\n};\r\n\r\nexport default function Simulation() {\r\n  const theme = useTheme();\r\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\r\n  const [info, setInfo] = useReducer(\r\n    (prev: SimulationInfo, next: SimulationInfo) => ({ ...prev, ...next }),\r\n    { fitness: 0, generation: 0 }\r\n  );\r\n  const [speed, setSpeed] = useState(0);\r\n  const [log, addLog] = useReducer(\r\n    (prev: string[], action: string) => lastFew([...prev, action], 100),\r\n    [\"Simulation started\"]\r\n  );\r\n  const brainRef = useRef<Brain | undefined>(undefined);\r\n  const simulatorRef = useRef<Simulator | undefined>(undefined);\r\n  useEffect(() => {\r\n    if (ref) {\r\n      const brain = new Brain(\r\n        (mutator, speed) => {\r\n          return new Promise((res) => {\r\n            ref.innerHTML = \"\";\r\n            const code = randItem(codes);\r\n            // addLog(`Simulating ${code}`);\r\n            setInfo({ currentCompany: code });\r\n            const simulator = new Simulator(\r\n              code,\r\n              {\r\n                company: dataset.prices[code as keyof typeof dataset[\"prices\"]],\r\n                posts: dataset.posts[code as keyof typeof dataset[\"prices\"]],\r\n              },\r\n              (investor, company, vision) => {\r\n                // Encode information into array of 0..1 floats\r\n                const input: number[] = [\r\n                  // Self info\r\n                  investor.cookies / MAX_COUNT,\r\n                  investor.cookiesInvested / MAX_COUNT,\r\n                  // Company info\r\n                  ...pad(\r\n                    company.values.map((c) => (c?.change ?? 0 + 1) * 0.5),\r\n                    HISTORY_STEPS\r\n                  ),\r\n                  // Vision info\r\n                  ...pad(\r\n                    flatMap(lastFew(vision.investors, 3), (i) => [\r\n                      ...pad(\r\n                        i.posts.map((p) => p.favoriteCount / MAX_COUNT),\r\n                        HISTORY_STEPS\r\n                      ),\r\n                      ...pad(\r\n                        i.posts.map((p) => p.retweetCount / MAX_COUNT),\r\n                        HISTORY_STEPS\r\n                      ),\r\n                      ...pad(\r\n                        i.posts.map((p) => sign(p.textSentiment) / MAX_COUNT),\r\n                        HISTORY_STEPS\r\n                      ),\r\n                    ]),\r\n                    HISTORY_STEPS * 3\r\n                  ),\r\n                ];\r\n                // Returns 0..1\r\n                const out = mutator(input);\r\n                // Remap to -1..1\r\n                return out * 2 - 1;\r\n              },\r\n              true,\r\n              () => {\r\n                const results = mean(simulator.results);\r\n                res(results);\r\n              },\r\n              (msg) => addLog(msg)\r\n            );\r\n            simulator.speed = speed;\r\n            simulator.renderer.mount(ref);\r\n            simulator.run();\r\n            simulatorRef.current = simulator;\r\n          });\r\n        },\r\n        ({ fitness, generation, currentFitness }) => {\r\n          if (generation !== undefined) {\r\n            addLog(\r\n              `Generation ${generation}: ${((fitness ?? 0) * 100).toFixed(\r\n                2\r\n              )}% accurate`\r\n            );\r\n          }\r\n          if (fitness) {\r\n            setInfo({ fitness });\r\n          }\r\n          if (generation) {\r\n            setInfo({ generation });\r\n          }\r\n          if (currentFitness) {\r\n            setInfo({ currentFitness });\r\n          }\r\n        }\r\n      );\r\n\r\n      brain.train();\r\n      brainRef.current = brain;\r\n      return () => (ref.innerHTML = \"\");\r\n    }\r\n    return noop;\r\n  }, [ref, setInfo, brainRef, simulatorRef, addLog]);\r\n  useEffect(() => {\r\n    if (brainRef.current && simulatorRef.current) {\r\n      const brain = brainRef.current;\r\n      const simulator = simulatorRef.current;\r\n      brain.speed = speed;\r\n      simulator.speed = speed;\r\n    }\r\n  }, [brainRef, simulatorRef, speed]);\r\n  return (\r\n    <Box display=\"flex\" height=\"100vh\">\r\n      <Box\r\n        flex={1}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        bgcolor={theme.palette.background.default}\r\n        overflow=\"auto\"\r\n        height=\"100vh\"\r\n      >\r\n        <div ref={(e) => setRef(e)}></div>\r\n      </Box>\r\n      <Box bgcolor={theme.palette.background.paper} pl={2} pr={1}>\r\n        <List>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={info.generation ?? 0}\r\n              secondary=\"Generation\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={\r\n                info.fitness ? `${(info.fitness * 100).toFixed(2)}%` : \"-\"\r\n              }\r\n              secondary=\"Fitness\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={\r\n                info.currentFitness\r\n                  ? `${(info.currentFitness * 100).toFixed(2)}%`\r\n                  : \"-\"\r\n              }\r\n              secondary=\"Current Fitness\"\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={`${info.currentCompany}.AX` ?? \"-\"}\r\n              secondary=\"Company\"\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Box>\r\n      <Box bgcolor={theme.palette.background.paper} width={300}>\r\n        <Box p={2}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Speed\r\n          </Typography>\r\n          <ButtonGroup\r\n            // color=\"primary\"\r\n            aria-label=\"outlined primary button group\"\r\n          >\r\n            <Button onClick={() => setSpeed(0)} disabled={speed === 0}>\r\n              1.0x\r\n            </Button>\r\n            <Button onClick={() => setSpeed(100)} disabled={speed === 100}>\r\n              0.5x\r\n            </Button>\r\n            <Button onClick={() => setSpeed(1000)} disabled={speed === 1000}>\r\n              0.1x\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Box>\r\n        <Box p={2} pr={4}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Actions\r\n          </Typography>\r\n          <Box pb={1}>\r\n            <Button\r\n              disabled={(info.generation ?? 0) < 1}\r\n              onClick={() => {\r\n                if (brainRef.current) {\r\n                  const brain = brainRef.current;\r\n                  if (brain.fittest.model) {\r\n                    download(\r\n                      new Blob([\r\n                        JSON.stringify((brain?.fittest?.model as any).toJSON()),\r\n                      ]),\r\n                      \"model.json\",\r\n                      \"application/json\"\r\n                    );\r\n                  }\r\n                }\r\n              }}\r\n              variant=\"outlined\"\r\n            >\r\n              Export fittest\r\n            </Button>\r\n          </Box>\r\n          <Typography variant=\"caption\" color=\"textSecondary\" display=\"block\">\r\n            Exporting the fittest genome is available after generation 1\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2}>\r\n          <Typography display=\"block\" variant=\"overline\" gutterBottom>\r\n            Log\r\n          </Typography>\r\n          {log.map((l) => (\r\n            <div>\r\n              <code>{l}</code>\r\n            </div>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { CssBaseline } from \"@material-ui/core\";\nimport \"./App.css\";\nimport Simulation from \"./Simulation\";\n\nfunction App() {\n  return (\n    <CssBaseline>\n      <div className=\"App\">\n        <Simulation />\n      </div>\n    </CssBaseline>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}